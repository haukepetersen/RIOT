From c73cb0441fce5c92b029c8abfca5088408e19642 Mon Sep 17 00:00:00 2001
From: Hauke Petersen <hauke.petersen@fu-berlin.de>
Date: Mon, 8 Feb 2016 14:57:11 +0100
Subject: [PATCH 3/3] Adapted to changed random interface

---
 uECC.c | 26 ++++++++++----------------
 uECC.h |  2 +-
 2 files changed, 11 insertions(+), 17 deletions(-)

diff --git a/uECC.c b/uECC.c
index 5fe3389..c4d9c91 100644
--- a/uECC.c
+++ b/uECC.c
@@ -1700,17 +1700,16 @@ int uECC_make_key(uint8_t p_publicKey[uECC_BYTES*2], uint8_t p_privateKey[uECC_B
     uECC_word_t l_private[uECC_WORDS];
     uECC_word_t l_tries = 0;
     
-    /* power on rng */
-    random_poweron();
-    
     do
     {
     repeat:
-        if(random_read((char *)l_private, sizeof(l_private))!=sizeof(l_private) || (l_tries++ >= MAX_TRIES))
+        if(l_tries++ >= MAX_TRIES)
         {
-           random_poweroff();
             return 0;
         }
+
+        hwrng_read((uint8_t *)l_private, sizeof(l_private));
+
         if(vli_isZero(l_private))
         {
             goto repeat;
@@ -1730,7 +1729,6 @@ int uECC_make_key(uint8_t p_publicKey[uECC_BYTES*2], uint8_t p_privateKey[uECC_B
     vli_nativeToBytes(p_privateKey, l_private);
     vli_nativeToBytes(p_publicKey, l_public.x);
     vli_nativeToBytes(p_publicKey + uECC_BYTES, l_public.y);
-    random_poweroff();
     return 1;
 }
 
@@ -1740,9 +1738,7 @@ int uECC_shared_secret(const uint8_t p_publicKey[uECC_BYTES*2], const uint8_t p_
     uECC_word_t l_private[uECC_WORDS];
     uECC_word_t l_random[uECC_WORDS];
     
-    random_poweron();
-    random_read((char *)l_random, sizeof(l_random));
-    random_poweroff();
+    hwrng_read((uint8_t *)l_random, sizeof(l_random));
     
     vli_bytesToNative(l_private, p_privateKey);
     vli_bytesToNative(l_public.x, p_publicKey);
@@ -2080,17 +2076,16 @@ int uECC_sign(const uint8_t p_privateKey[uECC_BYTES], const uint8_t p_hash[uECC_
     EccPoint p;
     uECC_word_t l_tries = 0;
     
-    random_poweron();
-    
     do
     {
     repeat:
-        if(random_read((char *)k, sizeof(k))!=sizeof(k) || (l_tries++ >= MAX_TRIES))
+        if(l_tries++ >= MAX_TRIES)
         {
-            random_poweroff();
             return 0;
         }
         
+        hwrng_read((uint8_t *)k, sizeof(k));
+
         if(vli_isZero(k))
         {
             goto repeat;
@@ -2134,11 +2129,11 @@ int uECC_sign(const uint8_t p_privateKey[uECC_BYTES], const uint8_t p_hash[uECC_
     l_tries = 0;
     do
     {
-        if(random_read((char *)l_tmp, sizeof(l_tmp))!=sizeof(l_tmp) || (l_tries++ >= MAX_TRIES))
+        if(l_tries++ >= MAX_TRIES)
         {
-            random_poweroff();
             return 0;
         }
+        hwrng_read((uint8_t *)l_tmp, sizeof(l_tmp));
     } while(vli_isZero(l_tmp));
     
     /* Prevent side channel analysis of vli_modInv() to determine
@@ -2166,7 +2161,6 @@ int uECC_sign(const uint8_t p_privateKey[uECC_BYTES], const uint8_t p_hash[uECC_
 #endif
     vli_nativeToBytes(p_signature + uECC_BYTES, s);
     
-    random_poweroff();
     return 1;
 }
 
diff --git a/uECC.h b/uECC.h
index 27a2e47..30aa1ba 100644
--- a/uECC.h
+++ b/uECC.h
@@ -4,7 +4,7 @@
 #define _MICRO_ECC_H_
 
 #include <stdint.h>
-#include "periph/random.h"
+#include "periph/hwrng.h"
 
 /* Platform selection options.
 If uECC_PLATFORM is not defined, the code will try to guess it based on compiler macros.
-- 
1.9.1

